<script src="/static/admin/js/pusher.min.js"></script>


<script>
    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws", "wss"],
        disabledTransport: []
    });

    let publicChannel = pusher.subscribe("public-channel");

    publicChannel.bind("app-starting", function(data) {
        successAlert(data.message);
    });

    publicChannel.bind("app-stopping", function(data) {
        warningAlert(data.message);
    });

    publicChannel.bind("host-service-status-changed", function(data) {
        successAlert(data.message);
    });

    publicChannel.bind("host-service-count-changed", function(data) {
        let healthyCountExists = !!document.getElementById("healthy_count")

        if (healthyCountExists) {
            document.getElementById("healthy_count").innerHTML = data.healthy_count;
            document.getElementById("warning_count").innerHTML = data.warning_count;
            document.getElementById("problem_count").innerHTML = data.problem_count;
            document.getElementById("pending_count").innerHTML = data.pending_count;
        }
    });

    // things we want to look for
    //  - service goes down
    //  - service comes up
    //  - service status changed
    //  - schedule changed
    //  - monitoring is turned off
    //  - next-run-event changes

    let attention = Prompt();

    {{ if .Flash != ""}}
    successAlert('{{.Flash}}')
    {{ end }}

    {{ if .Warning != ""}}
    warningAlert('{{.Warning}}')
    {{ end }}

    {{ if .Error != ""}}
    errorAlert('{{.Error}}')
    {{ end }}

    document.addEventListener("DOMContentLoaded", function() {
        document.getElementById("monitoring-live").addEventListener("change", function() {
            let enabled = document.getElementById("monitoring-live").checked;

            if (!enabled) {
                attention.confirm({
                    html: "This will stop monitoring of all hosts and services. Are you sure?",
                    callback: function(result) {
                        if (result) {
                            // want to turn off monitoring
                            updateSystemPref("monitoring_live", "0");
                            toggleMonitoring(0);
                        } else {
                            document.getElementById("monitoring-live").checked = true;
                        }
                    }
                });
            } else {
                updateSystemPref("monitoring_live", "1");
                toggleMonitoring(1);
            }
        })
    });

    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData();
        formData.append("pref_name", prefName);
        formData.append("pref_value", prefValue);
        formData.append("csrf_token", "{{.CSRFToken}}");

        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/set-system-pref");
        ajax.send(formData);
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Error: " + resp.message);
                }
            }
        }
    }

    function toggleMonitoring(enabled) {
        let formData = new FormData();
        formData.append("enabled", enabled);
        formData.append("csrf_token", "{{.CSRFToken}}");

        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/toggle-monitoring");
        ajax.send(formData);
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Error: " + resp.message);
                }
            }
        }
    }
</script>